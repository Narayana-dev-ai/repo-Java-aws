service: stack-${self:custom.globalConf.aspire}-${self:custom.globalConf.stage}-generic-connector
frameworkVersion: ">=1.38.0 <2.0.0"
plugins:

custom:
  # applicable configuration for all serverless
  globalConf: ${file(../serverless-globals.yml)}

  # required for all lambdas
  logsRetention: "30" # in days
  xrayActive: 'Active' # use either PassThrough or Active

  # required for all serverless.yml
  deploymentBucket: ${self:custom.globalConf.deploymentBucket}

  # specifics to this serverless.yml
  cannibalBucket: "s3-${self:custom.globalConf.function}-${self:custom.globalConf.cannibalAspire}-${self:custom.globalConf.awsAccount}-delivery-master-${self:custom.globalConf.region}"
  cannibalMessagesSNSTopicArn: "arn:aws:sns:${self:custom.globalConf.region}:${self:custom.globalConf.awsAccount}:sns-${self:custom.globalConf.cannibalAspire}-${self:custom.globalConf.cannibalEnv}-delivery-master-notif"
  # resources for connection to new Cannibal AWS account
  ACMSBatchEventQueueV2: ${self:custom.globalConf.sqsPrefix}-acms-batch-event-v2
  CMSBatchEventQueueV2: ${self:custom.globalConf.sqsPrefix}-cms-batch-event-v2
  AOCBatchEventQueueV2: ${self:custom.globalConf.sqsPrefix}-aoc-batch-event-v2
  ACMSPrmBatchEventQueueV2: ${self:custom.globalConf.sqsPrefix}-acmsprm-batch-event-v2
  OMSBatchEventQueue: ${self:custom.globalConf.sqsPrefix}-oms-batch-event
  ACMSPrmSaBatchEventQueueV2: ${self:custom.globalConf.sqsPrefix}-acmsprm-sa-batch-event-v2

  cannibalBucketV2: ${ssm:/app/${self:custom.globalConf.aspire}/cannibal/${self:custom.globalConf.cannibalEnv}/DECODED_MESSAGE_S3_BUCKET}
  cannibalMessagesSNSTopicArnV2: ${ssm:/app/${self:custom.globalConf.aspire}/cannibal/${self:custom.globalConf.cannibalEnv}/DECODED_MESSAGE_SNS_TOPIC_ARN}
  cannibalKsmKeyArn: ${ssm:/app/${self:custom.globalConf.aspire}/cannibal/${self:custom.globalConf.cannibalEnv}/DECODED_MESSAGE_KMS_KEY_ARN}
  # others
  connectorsBucket: ${cf:${self:custom.globalConf.stacks.connectors}.ConnectorsBucket}
  connectorsSNSTopicArn: ${cf:${self:custom.globalConf.stacks.connectors}.ConnectorsSNSTopicArn}
  connectorsSQSUrl: ${cf:${self:custom.globalConf.stacks.smhp}.FlightLegManagementQueue}
  srcBucketName: ${cf:${self:custom.globalConf.stacks.smhp}.SmhpBucket}
  processingDLQ: arn:aws:sqs:${self:custom.globalConf.region}:${env:ENV_AWS_ACCOUNT, '284952015401'}:sqs-${opt:aspire, env:ASPIRE, '2e30'}-${opt:stage, env:STAGE, 'dev'}-error-notify-dlq-processing
  AC_TABLE_PATH: ${ssm:/app/${self:custom.globalConf.aspire}/foundry/${self:custom.globalConf.foundryPgConfig}/s3syncAcTablePath, 'ref_data/ac_table.csv'}
  sqsKmsMasterKeyArn:
    'Fn::ImportValue': KMSSnsSqsKeyArn-${self:custom.globalConf.stage}
  flmFifoQueue: arn:aws:sqs:${self:custom.globalConf.region}:${env:ENV_AWS_ACCOUNT, '284952015401'}:sqs-${opt:aspire, env:ASPIRE, '2e30'}-${opt:stage, env:STAGE, 'dev'}-flight-leg-management.fifo
  uplinkResponseDecoderSnsTopicArn: ${ssm:/app/${self:custom.globalConf.aspire}/sparta/${self:custom.globalConf.stage}/UPLINK_RESPONSE_DECODED_SNS_TOPIC_ARN}
  spartaS3Bucket: ${ssm:/app/${self:custom.globalConf.aspire}/sparta/${self:custom.globalConf.stage}/SPARTA_S3_BUCKET}

provider:
  # required for all serverless.yml
  name: aws
  deploymentBucket: ${self:custom.deploymentBucket}
  runtime: java8
  stage: ${self:custom.globalConf.stage}
  region: eu-west-1
  stackTags: ${self:custom.globalConf.stacks.tags}
  variableSyntax: "\\${((?=self:|env:|opt:|ssm:|s3:|cf:|deep:|file\\()[ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}"
  environment:
    ASPIRE: ${self:custom.globalConf.aspire}
    STAGE: ${self:provider.stage}
    region: ${self:provider.region}
    LOG_LEVEL: "INFO"
    log4j_to_debug: ""
    REFDATA_PROXY_ENDPOINT: ${ssm:/app/${self:custom.globalConf.aspire}/refdata/${self:custom.globalConf.refdataEnv}/REFDATA_PROXY_ENDPOINT}
    # Reference data proxy API key
    REFDATA_API_KEY: /app/${self:custom.globalConf.aspire}/refdata/${self:custom.globalConf.refdataEnv}/REFDATA_API_KEY
  versionFunctions: true

package:
  individually: true

functions:
  liveDataConnector:
    name: ${self:custom.globalConf.lambdaPrefix}-live-data-connector-${self:custom.globalConf.vpc}
    handler: com.airbus.sm.hm.connector.generic.LiveDataConnectorHandler
    role: GenericConnectorLambdaRole
    package:
      artifact: target/gen-connector-functions-shade.jar
    description: Inject SA/LR/A350/A220 ACMS/AOC/CMS/OMS/MCA messages in platform.
    events:
      - sqs: arn:aws:sqs:${self:custom.globalConf.region}:${self:custom.globalConf.awsAccount}:sqs-${self:custom.globalConf.aspire}-${self:custom.globalConf.stage}-acms-batch-event-v2
      - sqs: arn:aws:sqs:${self:custom.globalConf.region}:${self:custom.globalConf.awsAccount}:sqs-${self:custom.globalConf.aspire}-${self:custom.globalConf.stage}-cms-batch-event-v2
      - sqs: arn:aws:sqs:${self:custom.globalConf.region}:${self:custom.globalConf.awsAccount}:sqs-${self:custom.globalConf.aspire}-${self:custom.globalConf.stage}-aoc-batch-event-v2
      - sqs: arn:aws:sqs:${self:custom.globalConf.region}:${self:custom.globalConf.awsAccount}:sqs-${self:custom.globalConf.aspire}-${self:custom.globalConf.stage}-acmsprm-batch-event-v2
      - sqs: arn:aws:sqs:${self:custom.globalConf.region}:${self:custom.globalConf.awsAccount}:sqs-${self:custom.globalConf.aspire}-${self:custom.globalConf.stage}-oms-batch-event
      - sqs: arn:aws:sqs:${self:custom.globalConf.region}:${self:custom.globalConf.awsAccount}:sqs-${self:custom.globalConf.aspire}-${self:custom.globalConf.stage}-acmsprm-sa-batch-event-v2
    memorySize: 1024
    timeout: 20
    environment:
      connectorsBucket: ${self:custom.connectorsBucket}
      connectorsSNSTopicArn: ${self:custom.connectorsSNSTopicArn}
      srcBucketName: ${self:custom.srcBucketName}
      AC_TABLE_PATH: ${self:custom.AC_TABLE_PATH}
      connectorsSQSUrl: ${self:custom.connectorsSQSUrl}
      discardFuturEvents: ${ssm:/app/${self:custom.globalConf.aspire}/feature_flipping/${self:custom.globalConf.stage}/discard_futur_events}
      AZ_ENV: ${env:AZ_ENV}

# you can add CloudFormation resource templates here
resources:
  Resources:
    # ===================================
    # ACMS SQS queue
    # ===================================
    ACMSCannibalEventQueueV2:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.ACMSBatchEventQueueV2}
        KmsMasterKeyId:
          'Fn::ImportValue': KMSSnsSqsKey-${self:custom.globalConf.stage}
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn: ${self:custom.processingDLQ}
          maxReceiveCount: 3

    ACMSCannibalEventQueueV2Policy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
          - Ref: ACMSCannibalEventQueueV2
        PolicyDocument:
          Statement:
            Effect: ALLOW
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn:
                  'Fn::Sub': ${self:custom.cannibalMessagesSNSTopicArnV2}

    # ===================================
    # CMS and MCA SQS queue
    # ===================================
    CMSCannibalEventQueueV2:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.CMSBatchEventQueueV2}
        KmsMasterKeyId:
          'Fn::ImportValue': KMSSnsSqsKey-${self:custom.globalConf.stage}
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn: ${self:custom.processingDLQ}
          maxReceiveCount: 3

    CMSCannibalEventQueueV2Policy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
          - Ref: CMSCannibalEventQueueV2
        PolicyDocument:
          Statement:
            Effect: ALLOW
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn:
                  'Fn::Sub': ${self:custom.cannibalMessagesSNSTopicArnV2}

    # ===================================
    # OMS SQS queue
    # ===================================
    OMSCannibalEventQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.OMSBatchEventQueue}
        KmsMasterKeyId:
          'Fn::ImportValue': KMSSnsSqsKey-${self:custom.globalConf.stage}
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn: ${self:custom.processingDLQ}
          maxReceiveCount: 3

    OMSCannibalEventQueuePolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
          - Ref: OMSCannibalEventQueue
        PolicyDocument:
          Statement:
            Effect: ALLOW
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn:
                  'Fn::Sub': ${self:custom.cannibalMessagesSNSTopicArnV2}

    # ===================================
    # AOC SQS queue
    # ===================================
    AOCCannibalEventQueueV2:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.AOCBatchEventQueueV2}
        KmsMasterKeyId:
          'Fn::ImportValue': KMSSnsSqsKey-${self:custom.globalConf.stage}
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn: ${self:custom.processingDLQ}
          maxReceiveCount: 3

    AOCCannibalEventQueueV2Policy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
          - Ref: AOCCannibalEventQueueV2
        PolicyDocument:
          Statement:
            Effect: ALLOW
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn:
                  'Fn::Sub': ${self:custom.cannibalMessagesSNSTopicArnV2}

    # ==================================
    # ACMS PRM SQS for SA Family
    # ==================================
    ACMSPrmSaCannibalEventQueueV2:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.ACMSPrmSaBatchEventQueueV2}
        KmsMasterKeyId:
          'Fn::ImportValue': KMSSnsSqsKey-${self:custom.globalConf.stage}
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn: ${self:custom.processingDLQ}
          maxReceiveCount: 3

    ACMSPrmSaCannibalEventQueueV2Policy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
          - Ref: ACMSPrmSaCannibalEventQueueV2
        PolicyDocument:
          Statement:
            Effect: ALLOW
            Principal: "*"
            Action:
              - "SQS:SendMessage"
              - "SQS:ReceiveMessage"
            Resource: "*"
            Condition:
              ForAllValues:ArnEquals:
                aws:SourceArn:
                  'Fn::Sub': ${self:custom.uplinkResponseDecoderSnsTopicArn}

    # Subscription for ACMS PRM SA Family Sns messages V2
    ACMSPrmSaSnsSqsSubscriptionV2:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: ${self:custom.uplinkResponseDecoderSnsTopicArn}
        Endpoint:
          Fn::GetAtt:
            - ACMSPrmSaCannibalEventQueueV2
            - Arn
        Protocol: sqs
        RawMessageDelivery: False

    # ===================================
    # ACMS PRM SQS queue
    # ===================================
    ACMSPrmCannibalEventQueueV2:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.ACMSPrmBatchEventQueueV2}
        KmsMasterKeyId:
          'Fn::ImportValue': KMSSnsSqsKey-${self:custom.globalConf.stage}
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn: ${self:custom.processingDLQ}
          maxReceiveCount: 3

    ACMSPrmCannibalEventQueueV2Policy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
          - Ref: ACMSPrmCannibalEventQueueV2
        PolicyDocument:
          Statement:
            Effect: ALLOW
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn:
                  'Fn::Sub': ${self:custom.cannibalMessagesSNSTopicArnV2}

    # template given by Cannibal team is in repo-2h23-dev-cannibal\devops\setup-cannibal\demoApplication\templates\sqs.tpl.yml
    # ===================================
    # AWS Cannibal SNS subscription
    # ===================================
    # Subscription for ACMS messages V2
    SnsSqsSubscriptionV2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          Fn::GetAtt:
            - ACMSCannibalEventQueueV2
            - Arn
        Protocol: sqs
        TopicArn: ${self:custom.cannibalMessagesSNSTopicArnV2}
        RawMessageDelivery: False
        FilterPolicy:
          cannibal_list_applications:
            - "Fn::Sub": "${self:custom.globalConf.cannibalListApplications}"
          cannibal_msg_type:
            - "ACMS"
            - "ACMF"
          cannibal_msg_report_number:
            - anything-but: "38"
          cannibal_msg_report_identifier:
            - "REP"
          cannibal_aircraft_family:
            - "A220"
            - "A320"
            - "A340"
            - "A350"
            - "A380"

    # Subscription for CMS and MCA messages V2
    CMSSnsSqsSubscriptionV2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          Fn::GetAtt:
            - CMSCannibalEventQueueV2
            - Arn
        Protocol: sqs
        TopicArn: ${self:custom.cannibalMessagesSNSTopicArnV2}
        RawMessageDelivery: False
        FilterPolicy:
          cannibal_list_applications:
            - "Fn::Sub": "${self:custom.globalConf.cannibalListApplications}"
          cannibal_msg_type:
            - "CMS"
            - "MCA"
          cannibal_aircraft_family:
            - "A320"
            - "A340"
            - "A350"
            - "A380"

    # Subscription for OMS messages
    OMSSnsSqsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          Fn::GetAtt:
            - OMSCannibalEventQueue
            - Arn
        Protocol: sqs
        TopicArn: ${self:custom.cannibalMessagesSNSTopicArnV2}
        RawMessageDelivery: False
        FilterPolicy:
          cannibal_list_applications:
            - "Fn::Sub": "${self:custom.globalConf.cannibalListApplications}"
          cannibal_msg_type:
            - "OMS"
          cannibal_aircraft_family:
            - "A220"

    # Subscription for AOC messages V2
    AOCSnsSubscriptionV2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          Fn::GetAtt:
            - AOCCannibalEventQueueV2
            - Arn
        Protocol: sqs
        TopicArn: ${self:custom.cannibalMessagesSNSTopicArnV2}
        RawMessageDelivery: False
        FilterPolicy:
          cannibal_list_applications:
            - "Fn::Sub": "${self:custom.globalConf.cannibalListApplications}"
          cannibal_msg_type:
            - "AOC"
          cannibal_aircraft_family:
            - "A320"
            - "A340"
            - "A350"
            - "A380"
            - "A220"

    # Subscription for ACMS PRM messages V2
    ACMSPrmSnsSqsSubscriptionV2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          Fn::GetAtt:
            - ACMSPrmCannibalEventQueueV2
            - Arn
        Protocol: sqs
        TopicArn: ${self:custom.cannibalMessagesSNSTopicArnV2}
        RawMessageDelivery: False
        FilterPolicy:
          cannibal_list_applications:
            - "Fn::Sub": "${self:custom.globalConf.cannibalListApplications}"
          cannibal_msg_type:
            - "ACMS"
          cannibal_msg_report_identifier:
            - "PRM"
          cannibal_aircraft_family:
            - "A340"
            - "A350"
            - "A380"

    # ===================================
    # Roles
    # ===================================
    GenericConnectorLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: '${self:custom.globalConf.rolePrefix}-generic-connector'
        Path:
          "Fn::Sub": "/${self:custom.globalConf.aspire}/runtime/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole

        Policies:
          - PolicyName: "${self:custom.globalConf.policyPrefix}-generic-connector-logs"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "kms:Decrypt"
                    - "kms:GenerateDataKey"
                  Resource:
                    - "${self:custom.sqsKmsMasterKeyArn}"
                    - "${self:custom.cannibalKsmKeyArn}"
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:GetQueueAttributes
                    - sqs:GetQueueUrl
                    - sqs:ListDeadLetterSourceQueues
                    - sqs:ListQueueTags
                    - sqs:DeleteMessageBatch
                    - sqs:DeleteMessage
                  Resource:
                    - !GetAtt ACMSCannibalEventQueueV2.Arn
                    - !GetAtt CMSCannibalEventQueueV2.Arn
                    - !GetAtt AOCCannibalEventQueueV2.Arn
                    - !GetAtt OMSCannibalEventQueue.Arn
                    - !GetAtt ACMSPrmCannibalEventQueueV2.Arn
                    - !GetAtt ACMSPrmSaCannibalEventQueueV2.Arn
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                    - "lambda:InvokeAsync"
                  Resource:
                    - "Fn::Sub": "arn:aws:lambda:*:${self:custom.globalConf.awsAccount}:${self:custom.globalConf.function}:${self:custom.globalConf.lambdaPrefix}-*"
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource:
                    - "Fn::Sub": '${self:custom.connectorsSNSTopicArn}'
                - Effect: "Allow"
                  Action:
                    - "sqs:SendMessage"
                  Resource:
                    - "Fn::Sub": '${self:custom.flmFifoQueue}'
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "s3:GetObjectAcl"
                    - "s3:GetObjectVersion"
                    - "s3:GetObjectVersionAcl"
                    - "s3:ListBucket"
                    - "s3:ListMultipartUploadParts"
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutObjectVersionAcl"
                  Resource:
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.cannibalBucket}"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.cannibalBucket}/*"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.cannibalBucketV2}"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.cannibalBucketV2}/*"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.srcBucketName}"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.srcBucketName}/*"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.spartaS3Bucket}"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.spartaS3Bucket}/*"
                - Effect: "Allow"
                  Action:
                    - "s3:AbortMultipartUpload"
                    - "s3:DeleteObject"
                    - "s3:DeleteObjectVersion"
                    - "s3:GetObject"
                    - "s3:GetObjectAcl"
                    - "s3:GetObjectVersion"
                    - "s3:GetObjectVersionAcl"
                    - "s3:ListBucket"
                    - "s3:ListMultipartUploadParts"
                    - "s3:PutBucketNotification"
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutObjectVersionAcl"
                    - "s3:PutObjectNotification"
                  Resource:
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.connectorsBucket}"
                    - "Fn::Sub": "arn:aws:s3:::${self:custom.connectorsBucket}/*"

        # Beware of the limit to 10 ManagedPolicyArns!
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - "Fn::Sub": "arn:aws:iam::${self:custom.globalConf.awsAccount}:policy/${self:custom.globalConf.aspire}/runtime/${self:custom.globalConf.policyPrefix}-ssm-read-only"
          - "Fn::Sub": "arn:aws:iam::${self:custom.globalConf.awsAccount}:policy/${self:custom.globalConf.aspire}/runtime/${self:custom.globalConf.policyPrefix}-ssm-read-feature-flipping"
          - "Fn::Sub": "arn:aws:iam::${self:custom.globalConf.awsAccount}:policy/${self:custom.globalConf.aspire}/runtime/${self:custom.globalConf.policyPrefix}-saz-invoke-proxy"

    # ===================================
    # Xray & Log retention
    # ===================================
    LiveDataConnectorLambdaFunction:
      Properties:
        TracingConfig:
          Mode: ${self:custom.xrayActive}

    LiveDataConnectorLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        RetentionInDays: ${self:custom.logsRetention}